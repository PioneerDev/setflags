swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "Set Flags"
  termsOfService: "https://github.com/set-flags/set-flags"
  contact:
    email: "yijun.yu@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "group-mixin.droneidentity.eu"
basePath: "/v2"
schemes:
  - "https"
paths:
  /flags:
    get:
      summary: "List Flags"
      description: "list all the flags"
      operationId: "listFlags"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "The user's ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "current_page"
          in: "query"
          description: "current page number"
          required: false
          type: "integer"
        - name: "page_size"
          in: "query"
          description: "per page size"
          required: false
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Flag"
        "400":
          description: "Invalid status value"
  /flag:
    post:
      summary: "Set a new flag"
      description: "create a flag"
      operationId: "createFlag"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "The user's ID"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "data"
          description: "Details of the flag"
          required: true
          schema:
            $ref: "#/definitions/Flag"
      responses:
        "405":
          description: "Invalid input"
  /flag/detail:
    get:
      summary: "Fetch a flag detail"
      description: "Fetch flag detail"
      operationId: "flagDetail"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "The user's ID"
          required: true
          type: "string"
          format: "uuid"
        - in: "query"
          name: "flag_id"
          description: "flag id"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Flag"
        "405":
          description: "Invalid input"
  /flags/{id}/{op}:
    put:
      summary: "Update an existing flag"
      description: "update an existing flag with operations for verification (yes, no) after uploaded the evidence (done)"
      operationId: "updateFlag"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "The user's ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "id"
          in: "path"
          description: "The flag to update"
          required: true
          type: "string"
          format: "uuid"
        - name: "op"
          in: "path"
          description: "The operation to update"
          required: true
          type: "string"
          enum:
            - "yes"
            - "no"
            - "done"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Flag not found"
        "405":
          description: "Update exception"
  /myflags:
    get:
      summary: "Finds flags by user"
      description: "list all flags of the user"
      operationId: "ListMyFlags"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "The user's ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "current_page"
          in: "query"
          description: "current page number"
          required: false
          type: "integer"
        - name: "page_size"
          in: "query"
          description: "per page size"
          required: false
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Flag"
        "400":
          description: "Invalid status value"
  /attachments:
    post:
      summary: "upload evidence"
      description: "upload evidence"
      operationId: "uploadEvidence"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "The user's ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "flag_id"
          in: "query"
          description: "Flag ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: true
          type: "file"
        - name: "type"
          in: "query"
          description: ""
          type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid tag value"
  /flags/{id}/witnesses:
    get:
      description: "list all the witnesses"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "The user's ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "id"
          in: "path"
          description: "Flag ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "current_page"
          in: "query"
          description: "current page number"
          required: false
          type: "integer"
        - name: "page_size"
          in: "query"
          description: "per page size"
          required: false
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Witness"
  /flags/{id}/evidences:
    get:
      description: "list all the evidences since yesterday"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "The user's ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "id"
          in: "path"
          description: "Flag ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "current_page"
          in: "query"
          description: "current page number"
          required: false
          type: "integer"
        - name: "page_size"
          in: "query"
          description: "per page size"
          required: false
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Evidence"
  /me:
    get:
      description: "Get the current user's information"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "The user's ID"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
  /auth:
    get:
      description: "auth callback url, mixin auth server call this uri"
      parameters:
        - name: "code"
          in: "query"
          description: "authorization code"
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AuthToken"
  /users/rewards/{flag_id}:
    get:
      description: "check the total rewards received by the user for the flag"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "x-user-id"
          in: "header"
          description: "user id"
          required: true
          type: "string"
          format: "uuid"
        - name: "flag_id"
          in: "path"
          description: "Flag ID"
          required: true
          type: "string"
          format: "uuid"
        - name: "current_page"
          in: "query"
          description: "current page number"
          required: false
          type: "integer"
        - name: "page_size"
          in: "query"
          description: "per page size"
          required: false
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Evidence"
  /assets/{id}:
    get:
      description: "get the asset information"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "id"
          in: "path"
          description: "Asset ID"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Asset"
  /assets:
    get:
      description: "get current user's asset information"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer token"
        - name: "current_page"
          in: "query"
          description: "current page number"
          required: false
          type: "integer"
        - name: "page_size"
          in: "query"
          description: "per page size"
          required: false
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Asset"
securityDefinitions:
  mixin_auth:
    type: "oauth2"
    authorizationUrl: "https://mixin.one"
    flow: "implicit"
    scopes:
      read:users: "read your pets"
definitions:
  Flag:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      payer_id:
        type: "string"
        format: "uuid"
      payer_name:
        type: "string"
      payer_avatar_url:
        type: "string"
      task:
        type: "string"
      days:
        type: "integer"
        format: "int32"
      max_witness:
        type: "integer"
        format: "int32"
      asset_id:
        type: "string"
        format: "uuid"
      symbol:
        type: "string"
      amount:
        type: "number"
      times_achieved:
        type: "integer"
        format: "int32"
      status:
        type: "string"
        enum:
          # payment has complete
          - "paid"
          # payment not complete
          - "pending"
      period_status:
        type: "string"
        enum:
          # upload evidence
          - "done"
          # not yet upload evidence
          - "undone"
          # flag life end
          - "closed"
      verified:
        type: "string"
        enum:
          # payee flag complete
          - "yes"
          # payee flag not complete
          - "no"
          # init
          - "unset"
      remaining_days:
        type: "integer"
      remaining_amount:
        type: "number"
  Evidence:
    type: "object"
    properties:
      attachement_id:
        type: "string"
        format: "uuid"
      flag_id:
        type: "string"
        format: "uuid"
      type:
        type: "string"
        enum:
          - "image"
          - "video"
          - "audio"
          - "document"
      url:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
  User:
    type: "object"
    properties:
      user_id:
        type: "string"
        format: "uuid"
      identity_number:
        type: "string"
      full_name:
        type: "string"
      avatar_url:
        type: "string"
  Witness:
    type: "object"
    properties:
      flag_id:
        type: "string"
        format: "uuid"
      payee_id:
        type: "string"
        format: "uuid"
      payee_name:
        type: "string"
      payee_avatar_url:
        type: "string"
        format: "url"
      amount:
        type: "number"
        format: "float"
      symbol:
        type: "string"
      verified:
        type: "string"
        enum:
          # payee flag complete
          - "yes"
          # payee flag not complete
          - "no"
      witnessed_time:
        type: "string"
        format: "date-time"
  Payer:
    type: "object"
    properties:
      paid:
        type: "boolean"
  Payee:
    type: "object"
    properties:
      verified:
        type: "boolean"
  Asset:
    type: "object"
    properties:
      asset_id:
        type: "string"
        format: "uuid"
      symbol:
        type: "string"
      balance:
        type: "number"
      price_usd:
        type: "number"
  AuthToken:
    type: "object"
    properties:
      token:
        type: "string"
      user_id:
        type: "string"
externalDocs:
  description: "Find out more about Set Flags"
  url: "http://group-mixin.droneidentity.eu"
